import cv2
import os
import string
import tkinter as tk
from tkinter import messagebox
from tkinter import filedialog
from tkinter import ttk
from PIL import Image, ImageTk  # For custom image handling in Tkinter

# Function to open an image file using a file dialog
def open_image():
    file_path = filedialog.askopenfilename(title="Select an Image", filetypes=[("Image files", "*.jpg;*.jpeg;*.png")])
    return file_path

# Function to save the encrypted image
def save_encrypted_image(image):
    file_path = filedialog.asksaveasfilename(defaultextension=".jpg", filetypes=[("JPEG", "*.jpg")])
    cv2.imwrite(file_path, image)
    return file_path

# Function to encrypt the message into the image
def encrypt_message(img, msg, password):
    d = {}
    c = {}
    for i in range(255):
        d[chr(i)] = i
        c[i] = chr(i)

    n, m, z = 0, 0, 0
    for i in range(len(msg)):
        img[n, m, z] = d[msg[i]]
        n = n + 1
        m = m + 1
        z = (z + 1) % 3

    return img

# Function for Decryption
def decrypt_message(img, original_msg_len, password, entered_password):
    if password == entered_password:
        d = {}
        c = {}
        for i in range(255):
            d[chr(i)] = i
            c[i] = chr(i)
        
        message = ""
        n, m, z = 0, 0, 0
        for i in range(original_msg_len):
            message += c[img[n, m, z]]
            n = n + 1
            m = m + 1
            z = (z + 1) % 3
        
        return message
    else:
        return "YOU ARE NOT AUTHORIZED!"

# Function to handle the encryption process
def handle_encryption():
    img_path = open_image()
    if img_path == "":
        return
    
    img = cv2.imread(img_path)
    msg = entry_message.get()
    password = entry_password.get()
    
    if not msg or not password:
        messagebox.showerror("Input Error", "Please enter both a secret message and a password!")
        return

    # Update the progress bar
    progress_bar["value"] = 0
    root.update_idletasks()

    # Encrypt message
    encrypted_img = encrypt_message(img, msg, password)
    
    # Update progress bar for the encryption process
    for i in range(100):
        progress_bar["value"] = i + 1
        root.update_idletasks()

    encrypted_image_path = save_encrypted_image(encrypted_img)
    messagebox.showinfo("Success", f"Image encrypted successfully and saved at {encrypted_image_path}")
    os.system(f"start {encrypted_image_path}")

# Function to handle the decryption process
def handle_decryption():
    img_path = open_image()
    if img_path == "":
        return

    img = cv2.imread(img_path)
    entered_password = entry_decrypt_password.get()
    original_msg_len = len(entry_message.get())

    decrypted_message = decrypt_message(img, original_msg_len, entry_password.get(), entered_password)
    
    if decrypted_message == "YOU ARE NOT AUTHORIZED!":
        messagebox.showerror("Decryption Failed", decrypted_message)
    else:
        messagebox.showinfo("Decrypted Message", f"Decrypted Message: {decrypted_message}")

# GUI Setup using Tkinter
root = tk.Tk()
root.title("Image Encryption/Decryption")
root.geometry("500x600")

# Set up a custom background using an image (ensure this file exists in the working directory)
background_image = Image.open("background_image.jpg")  # Replace with your image file
background_image = background_image.resize((500, 600), Image.ANTIALIAS)
bg_img = ImageTk.PhotoImage(background_image)
bg_label = tk.Label(root, image=bg_img)
bg_label.place(relwidth=1, relheight=1)

# Frame for the message and password input
frame = tk.Frame(root, bg="white", bd=2, relief="solid")
frame.pack(pady=20)

# Label and input for secret message
label_message = tk.Label(frame, text="Enter Secret Message:", bg="white", font=("Arial", 12))
label_message.grid(row=0, column=0, padx=5, pady=5)
entry_message = tk.Entry(frame, width=40, font=("Arial", 12))
entry_message.grid(row=0, column=1, padx=5, pady=5)

# Label and input for password
label_password = tk.Label(frame, text="Enter Passcode:", bg="white", font=("Arial", 12))
label_password.grid(row=1, column=0, padx=5, pady=5)
entry_password = tk.Entry(frame, width=40, show="*", font=("Arial", 12))
entry_password.grid(row=1, column=1, padx=5, pady=5)

# Frame for Decryption passcode input
frame_decrypt = tk.Frame(root, bg="white", bd=2, relief="solid")
frame_decrypt.pack(pady=20)

# Label and input for decryption passcode
label_decrypt_password = tk.Label(frame_decrypt, text="Enter Passcode for Decryption:", bg="white", font=("Arial", 12))
label_decrypt_password.grid(row=0, column=0, padx=5, pady=5)
entry_decrypt_password = tk.Entry(frame_decrypt, width=40, show="*", font=("Arial", 12))
entry_decrypt_password.grid(row=0, column=1, padx=5, pady=5)

# Progress Bar
progress_bar = ttk.Progressbar(root, length=300, mode="determinate", maximum=100)
progress_bar.pack(pady=10)

# Buttons for encrypting and decrypting
button_encrypt = tk.Button(root, text="Encrypt Image", command=handle_encryption, width=20, font=("Arial", 12), bg="#4CAF50", fg="white")
button_encrypt.pack(pady=5)

button_decrypt = tk.Button(root, text="Decrypt Image", command=handle_decryption, width=20, font=("Arial", 12), bg="#f44336", fg="white")
button_decrypt.pack(pady=5)

# Run the Tkinter event loop
root.mainloop()
